[gcode_macro TEST_ACCEL_SINGLE_AXIS]
description: Test a single acceleration value on one axis (X or Y) with homing and missed steps detection
variable_axis: "X"           ; Default axis to test (X or Y)
variable_accel: 2000        ; Acceleration to test (mm/s²)
variable_velocity: 30      ; Test velocity (mm/s)
variable_margin: 10         ; Margin from bed edges (mm)
variable_iterations: 10     ; Number of back-and-forth moves
gcode:
    {% set AXIS = params.AXIS|default(X)|upper %}
    {% set ACCEL = params.ACCEL|default(2000)|float %}
    {% set VELOCITY = params.VELOCITY|default(30)|float %}
    {% set MARGIN = params.MARGIN|default(10)|float %}
    {% set ITERATIONS = params.ITERATIONS|default(10)|int %}
    
    {% if AXIS not in ['X', 'Y'] %}
        { action_raise_error("AXIS must be 'X' or 'Y'") }
    {% endif %}
    
    ; Get bed dimensions
    {% set X_MIN = printer.configfile.settings.stepper_x.position_min|float|default(0) %}
    {% set X_MAX = printer.configfile.settings.stepper_x.position_max|float|default(200) %}
    {% set Y_MIN = printer.configfile.settings.stepper_y.position_min|float|default(0) %}
    {% set Y_MAX = printer.configfile.settings.stepper_y.position_max|float|default(200) %}
    
    ; Calculate safe move range
    {% set X_START = X_MIN + MARGIN %}
    {% set X_END = X_MAX - MARGIN %}
    {% set Y_START = Y_MIN + MARGIN %}
    {% set Y_END = Y_MAX - MARGIN %}
    
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    # Small pattern at center
    # Find X/Y center point
    {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
    {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
    # Set small pattern box around center point
    {% set x_center_min = x_center - (smallpatternsize/2) %}
    {% set x_center_max = x_center + (smallpatternsize/2) %}
    {% set y_center_min = y_center - (smallpatternsize/2) %}
    {% set y_center_max = y_center + (smallpatternsize/2) %}
    ; Validate move range

    {% if X_START >= X_END or Y_START >= Y_END %}
        { action_raise_error("Invalid move range: Check MARGIN and bed dimensions") }
    {% endif %}
    
    ; Log start
    { action_respond_info("Starting accel test for " ~ AXIS ~ " axis at accel: " ~ ACCEL ~ " mm/s²") }

    ; Home the specified axis
    G28 XY

    M400
    G90
    {% if AXIS == 'X' %}
        G0 X{printer.toolhead.axis_maximum.x- 20} F{30*60}
    {% else %}
        G0 Y{printer.toolhead.axis_maximum.y- 20} F{30*60}
    {% endif %}
    G4 P1000 
    GET_POSITION

    M400 # Finish moves
     {% if AXIS == 'X' %}
        G0 Y{(Y_MIN + Y_MAX)/2} F6000
    {% else %}
        G0 X{(X_MIN + X_MAX)/2} F6000
    {% endif %}

    
    ; Set test acceleration
    M204 S{ACCEL}
    
    ; Perform back-and-forth moves
    {% for i in range(ITERATIONS) %}
        {% if AXIS == 'X' %}
            M117 Starting Velocity test for " ~ VELOCITY * (i+1) ~ " at accel: " ~ ACCEL ~ " mm/s²"
            G0 X{X_START} F{VELOCITY * (i+1) * 60}
            G0 X{X_END} F{VELOCITY * (i+1) * 60}
            G0 X{x_center_min} F{VELOCITY * (i+1) * 60}
            G0 X{x_center_max} F{VELOCITY * (i+1) * 60}
            G0 X{x_center_min} F{VELOCITY * (i+1) * 60}
            G0 X{x_center_max} F{VELOCITY * (i+1) * 60}
            G0 X{X_START} F{VELOCITY * (i+1) * 60}
            G0 X{X_END} F{VELOCITY * (i+1) * 60}
        {% else %}
            M117 Starting Velocity test for " ~ VELOCITY * (i+1) ~ " at accel: " ~ ACCEL ~ " mm/s²" 
            G0 Y{Y_START} F{VELOCITY * (i+1) * 60}
            G0 Y{Y_END} F{VELOCITY * (i+1) * 60}
            G0 Y{y_center_min} F{VELOCITY * (i+1) * 60}
            G0 Y{y_center_max} F{VELOCITY * (i+1) * 60}
            G0 Y{y_center_min} F{VELOCITY * (i+1) * 60}
            G0 Y{y_center_max} F{VELOCITY * (i+1) * 60}
            G0 Y{Y_START} F{VELOCITY * (i+1) * 60}
            G0 Y{Y_END} F{VELOCITY * (i+1) * 60}
        {% endif %}
    {% endfor %}
    
    ; Home again to check for missed steps
    M400 # Finish moves
    G28 {AXIS}
    G90
    {% if AXIS == 'X' %}
        G0 X{X_END} F{30*60}
    {% else %}
        G0 Y{Y_END} F{30*60}
    {% endif %}
    G4 P1000 
    GET_POSITION